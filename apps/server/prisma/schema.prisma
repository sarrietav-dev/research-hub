// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SeedGroup {
  id                  Int                  @id @default(autoincrement())
  name                String
  acronym             String?
  researchGroup       ResearchGroup        @relation(fields: [researchGroupId], references: [id])
  researchGroupId     Int                  @map("research_group_id")
  researchLines       String[]             @map("research_lines")
  description         String
  events              Event[]
  membershipRecords   MembershipRecord[]
  coResearcherRecords CoResearcherRecord[]
  leaderRecords       LeaderRecord[]
  program             Program              @relation(fields: [programId], references: [id])
  programId           Int                  @map("program_id")
  projects            Project[]
  creationDate        DateTime             @map("creation_date")

  @@map("seed_groups")
}

model LeaderRecord {
  id          Int       @id @default(autoincrement())
  seedGroup   SeedGroup @relation(fields: [seedGroupId], references: [id])
  seedGroupId Int       @map("seed_group_id")
  leader      Person    @relation(fields: [leaderId], references: [id])
  leaderId    Int       @map("leader_id")
  period      String

  @@map("leader_record")
}

model CoResearcherRecord {
  id             Int       @id @default(autoincrement())
  seedGroup      SeedGroup @relation(fields: [seedGroupId], references: [id])
  seedGroupId    Int       @map("seed_group_id")
  coResearcher   Person    @relation(fields: [coResearcherId], references: [id])
  coResearcherId Int       @map("co_researcher_id")
  period         String

  @@map("co_researcher_record")
}

model MembershipRecord {
  id              Int            @id @default(autoincrement())
  seedGroup       SeedGroup?     @relation(fields: [seedGroupId], references: [id])
  seedGroupId     Int?           @map("seed_group_id")
  member          Person?        @relation(fields: [memberId], references: [id])
  memberId        Int?           @map("member_id")
  period          String
  affiliationDate DateTime       @map("affiliation_date")
  functions       String[]
  isActive        Boolean        @default(true) @map("is_active")
  role            MembershipRole @relation(fields: [roleId], references: [id])
  roleId          Int            @map("role_id")

  @@map("membership_record")
}

model Person {
  id                 Int                  @id @default(autoincrement())
  name               String
  identityCard       String               @unique @map("identity_card")
  institutionalCode  String               @unique @map("institutional_code")
  email              String               @unique
  phone              String               @unique
  program            Program              @relation(fields: [programId], references: [id])
  programId          Int                  @map("program_id")
  membershipRecords  MembershipRecord[]
  projects           Project[]
  LeaderRecord       LeaderRecord[]
  CoResearcherRecord CoResearcherRecord[]
  User               User[]
  products           Product[]

  @@map("directory")
}

model Program {
  id   Int    @id @default(autoincrement())
  name String @unique

  seedGroups    SeedGroup[]
  person        Person[]
  researchGroup ResearchGroup[]

  @@map("programs")
}

model MembershipRole {
  id               Int                @id @default(autoincrement())
  name             String
  MembershipRecord MembershipRecord[]

  @@map("membership_roles")
}

model ResearchGroup {
  id         Int         @id @default(autoincrement())
  name       String
  program    Program     @relation(fields: [programId], references: [id])
  programId  Int         @map("program_id")
  seedGroups SeedGroup[]

  @@map("research_groups")
}

model Event {
  id          Int       @id @default(autoincrement())
  description String
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  type        EventType
  seedGroup   SeedGroup @relation(fields: [seedGroupId], references: [id])
  seedGroupId Int       @map("seed_group_id")

  @@map("events")
}

enum EventType {
  Local
  International
}

model Project {
  id                       Int                    @id @default(autoincrement())
  name                     String
  type                     ProjectStatus
  startDate                DateTime               @map("start_date")
  endDate                  DateTime?              @map("end_date")
  certifyingOrganization   CertifyingOrganization @relation(fields: [certifyingOrganizationId], references: [id])
  certifyingOrganizationId Int                    @map("certifying_organization_id")
  approvedAmount           Float                  @map("approved_amount")
  products                 Product[]
  seedGroup                SeedGroup              @relation(fields: [seedGroupId], references: [id])
  seedGroupId              Int
  director                 Person                 @relation(fields: [directorId], references: [id])
  directorId               Int
}

enum ProjectStatus {
  Finished
  InProgress
}

model CertifyingOrganization {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[]
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  type          ProductType @relation(fields: [productTypeId], references: [id])
  date          DateTime
  project       Project?    @relation(fields: [projectId], references: [id])
  projectId     Int?        @map("project_id")
  members       Person[]
  productTypeId Int         @map("productTypesId")
}

model ProductType {
  id   Int    @id @default(autoincrement())
  name String

  products Product[]

  @@map("product_types")
}

model User {
  id                 Int     @id @default(autoincrement())
  email              String  @unique
  password           String
  name               String
  associatedPersonId Int?    @map("associated_person_id")
  associatedPerson   Person? @relation(fields: [associatedPersonId], references: [id])

  @@map("users")
}
